[{"E:\\BootCamp Projects\\Project_5\\src\\index.tsx":"1","E:\\BootCamp Projects\\Project_5\\src\\reportWebVitals.ts":"2","E:\\BootCamp Projects\\Project_5\\src\\App.tsx":"3","E:\\BootCamp Projects\\Project_5\\src\\Home.tsx":"4","E:\\BootCamp Projects\\Project_5\\src\\Services\\quiz_service.ts":"5","E:\\BootCamp Projects\\Project_5\\src\\Components\\QuestionCard.tsx":"6"},{"size":517,"mtime":1611258106502,"results":"7","hashOfConfig":"8"},{"size":440,"mtime":1611258106503,"results":"9","hashOfConfig":"8"},{"size":1086,"mtime":1612294704309,"results":"10","hashOfConfig":"8"},{"size":2289,"mtime":1612299193293,"results":"11","hashOfConfig":"8"},{"size":725,"mtime":1612292213774,"results":"12","hashOfConfig":"8"},{"size":1456,"mtime":1612292213770,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"dw4d0m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"E:\\BootCamp Projects\\Project_5\\src\\index.tsx",[],["30","31"],"E:\\BootCamp Projects\\Project_5\\src\\reportWebVitals.ts",[],"E:\\BootCamp Projects\\Project_5\\src\\App.tsx",["32","33"],"import React, { useState } from \"react\";\r\nimport QuizApp from \"./Home\";\r\nimport './App.css';\r\nimport './QuizCard.css';\r\n\r\n\r\nfunction App(){\r\n\r\nlet [SelectedQuiz, setSelectedQuiz] = useState(0);\r\n\r\nif(SelectedQuiz != 0){\r\n  return(\r\n      <div className=\"Main\" >\r\n \r\n<QuizApp QuizType={SelectedQuiz} />\r\n</div>\r\n )\r\n}\r\n\r\nelse{\r\n  return(\r\n    <div className=\"Main\" >\r\n      \r\n      <div className={SelectedQuiz != 0 ? \"HideMe\" : \"ShowMe\"}>\r\n  <div className=\"QuizHead\" >Quiz App</div>\r\n\r\n  <div className=\"SelectQuizBtn\" >\r\n    Select Quiz\r\n  </div>\r\n\r\n  <div className=\"SelectBox\" >\r\n\r\n  <div onClick={()=>setSelectedQuiz(9)} >\r\n    General Knowledge\r\n  </div>\r\n  <div onClick={()=>setSelectedQuiz(21)} >\r\n    Sports\r\n  </div>\r\n  <div onClick={()=>setSelectedQuiz(18)} >\r\n   Computer Sceince \r\n  </div>\r\n  <div onClick={()=>setSelectedQuiz(19)}>\r\n    Mathematics Sceince\r\n  </div>\r\n  <div onClick={()=>setSelectedQuiz(23)}>\r\n   History \r\n  </div>\r\n  <div onClick={()=>setSelectedQuiz(27)}>\r\n    Animals\r\n  </div>\r\n  \r\n\r\n  </div>\r\n  </div>\r\n\r\n    </div>\r\n)\r\n}\r\n\r\n}\r\n\r\nexport default App;","E:\\BootCamp Projects\\Project_5\\src\\Home.tsx",["34","35","36","37","38","39"],"import React, {useEffect, useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport './QuizCard.css';\r\nimport {getQuizDetails} from './Services/quiz_service';\r\nimport {questionType,Quiz} from './Types/quiz_Types';\r\nimport QuestionCard from './Components/QuestionCard';\r\nimport Trophy from './trophy.svg';\r\nimport Fail from './fail.svg';\r\n\r\n\r\n\r\nfunction App(props:any) {\r\n\r\nlet [quiz, setquiz] = useState<questionType[]>([]);\r\nlet [CurrentStep, setCurrentStep] = useState(0);\r\nlet [CurrentScore, setCurrentScore] = useState(0);\r\nlet [Result, setResult] = useState(-1);\r\n\r\n\r\n useEffect(()=>{\r\n\r\n   async function getData() {\r\n     const questions = await getQuizDetails(10,\"easy\",props.QuizType)\r\n     \r\n      setquiz(questions)\r\n       console.log(questions)\r\n   }\r\n\r\n   getData()\r\n },[])\r\n\r\nconst handleSubmit = (e:React.FormEvent<EventTarget>,Ans:string) =>{\r\n  console.log(Ans)\r\n   e.preventDefault();\r\n   if(CurrentStep !== quiz.length-1){\r\n   setCurrentStep(++CurrentStep)\r\n   console.log(\"Currect Answer is \" + quiz[(CurrentStep-1)].answer + \" & Your Answer is \" + Ans )\r\n     if(Ans===quiz[(CurrentStep-1)].answer){\r\n       setCurrentScore(++CurrentScore)\r\n     }\r\n  }\r\n  else{\r\n    if(Ans===quiz[(CurrentStep)].answer){\r\n      setCurrentScore(++CurrentScore)\r\n    }\r\n    setResult(CurrentScore)\r\n  }\r\n}\r\n\r\n\r\nif(!quiz.length){\r\n  return(<h3 style={{textAlign:\"center\", marginTop:\"250px\", color:\"white\"}} >Loadingg</h3>)\r\n}\r\n\r\n  return (\r\n  <div className=\"CardMain\">\r\n    <div className={Result==-1 ? \"ShowMe\" : \"HideMe\"} >\r\n    <h3 className=\"ScoreBoard\">Score {CurrentScore}</h3>\r\n    <h5 style={{textAlign:\"center\"}} >{CurrentStep+1 + \" of \" + quiz.length}</h5>\r\n   <QuestionCard \r\n    option={quiz[CurrentStep].option}\r\n    question={quiz[CurrentStep].question}\r\n    callBack={handleSubmit}\r\n   />\r\n</div>\r\n\r\n<div className={Result!=-1 ? \"ResultDiv\" : \"HideMe\"} >\r\n<img src={Result >= 5 ? Trophy : Fail} />\r\n<h2>{Result >= 5 ? \"Congrats!\" : \"Sorry Fail\"}</h2>\r\n<h1 style={{color:Result >= 5 ? \"rgb(9, 146, 9)\" : \"red\"}}>{((Result/quiz.length)*100).toFixed(1)}% Score</h1>\r\n<p  >You attempt<span> {quiz.length } Questions</span> and from that <span>{Result} answer</span> is correct</p>\r\n{/* color: rgb(9, 146, 9); */}\r\n\r\n</div>\r\n\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\BootCamp Projects\\Project_5\\src\\Services\\quiz_service.ts",[],"E:\\BootCamp Projects\\Project_5\\src\\Components\\QuestionCard.tsx",[],["40","41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":11,"column":17,"nodeType":"48","messageId":"49","endLine":11,"endColumn":19},{"ruleId":"46","severity":1,"message":"47","line":24,"column":36,"nodeType":"48","messageId":"49","endLine":24,"endColumn":38},{"ruleId":"50","severity":1,"message":"51","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":12},{"ruleId":"50","severity":1,"message":"54","line":5,"column":22,"nodeType":"52","messageId":"53","endLine":5,"endColumn":26},{"ruleId":"55","severity":1,"message":"56","line":30,"column":4,"nodeType":"57","endLine":30,"endColumn":6,"suggestions":"58"},{"ruleId":"46","severity":1,"message":"59","line":57,"column":27,"nodeType":"48","messageId":"49","endLine":57,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":67,"column":23,"nodeType":"48","messageId":"49","endLine":67,"endColumn":25},{"ruleId":"60","severity":1,"message":"61","line":68,"column":1,"nodeType":"62","endLine":68,"endColumn":42},{"ruleId":"42","replacedBy":"63"},{"ruleId":"44","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Quiz' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.QuizType'. Either include it or remove the dependency array.","ArrayExpression",["67"],"Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["65"],["66"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [props.QuizType]",{"range":"70","text":"71"},[790,792],"[props.QuizType]"]